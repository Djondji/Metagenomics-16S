#### Microbiome analysis for beginner 
#### This protocol should be adapted by users according to what they are looking for

#### Set the working directory to the analysis folder where all your data is located
setwd("path/to/your/folder")

#### loading packages
library("tidyverse")
library("reshape2")
library("RColorBrewer")
library("grid")
library("phyloseq")
library("devtools")
library("ggplot2")
library("dplyr")
library("tibble")
library("microbiome")
library("vegan")
library("DESeq2")
library("knitr")
library("ape")
library("ggpubr")
library("dendextend")
library("extrafont")
library("scales")

#### import data
otu <- read.csv("OTU_Table.csv", header = T, row.names = 1, sep = ";")
tax <- read.csv("Taxonomy_Table.csv", header = T, row.names = 1, sep = ";")
samples_df <- read.csv("Sample_Table.csv", header = T, row.names = 1, sep = ";")

#### Let's have a look at the different tables:
otu[1:2, 1:6]
tax[1:2, ]
samples_df[1:2, ]

#### Transform into matrixes otu and tax tables (sample table can be left as data frame)
otu_mat <- as.matrix(otu)
tax_mat <- as.matrix(tax)

#### build the phyloseq object
mach <- phyloseq(otu_table(otu_mat, taxa_are_rows = TRUE),
                 tax_table(tax_mat),
                 sample_data(samples_df))

#### Visualize the phyloseq object 
mach
sample_names(mach)
rank_names(mach)
sample_variables(mach)

#### Normalize number of reads in each sample using median sequencing depth.
total = median(sample_sums(mach))
standf = function(x, t=total) round(t * (x / sum(x)))
carbom = transform_sample_counts(mach, standf)
carbom

#### Taxonomic filtering to get only otus present in more than 3 samples
## Create table, number of features for each Genus
table(tax_table(carbom)[, "Genus"], exclude = NULL)     # We can also do it for Phylum and Family levels

### Ensures that features with ambiguous Genus annotation are also removed
ps0 <- subset_taxa(carbom, !is.na(Genus) & !Genus %in% c("", "uncharacterized"))

### Compute prevalence of each feature, store as data.frame
prevdf = apply(X = otu_table(ps0),
               MARGIN = ifelse(taxa_are_rows(ps0), yes = 1, no = 2),
               FUN = function(x){sum(x > 0)})

### Add taxonomy and total read counts to this data.frame
prevdf = data.frame(Prevalence = prevdf,
                    TotalAbundance = taxa_sums(ps0),
                    tax_table(ps0))

### Compute the total and average prevalences of the features in each genus.
plyr::ddply(prevdf, "Genus", function(df1){cbind(mean(df1$Prevalence),sum(df1$Prevalence))})

### Rugosibacter appeared in just 2 pools of samples total so we need to Define genus to filter
filterPhyla = c("Rugosibacter")
ps1 = subset_taxa(ps0, !Genus %in% filterPhyla)
ps1

### Subset to the remaining Genus
prevdf1 = subset(prevdf, Genus %in% get_taxa_unique(ps1, "Genus"))

###  Define prevalence threshold of at least 3 pools of samples on the total samples
prevalenceThreshold = 0.142857142857142 * nsamples(ps1)
prevalenceThreshold

### Execute prevalence filter, using `prune_taxa()` function
keepTaxa = rownames(prevdf1)[(prevdf1$Prevalence >= prevalenceThreshold)]
ps2 = prune_taxa(keepTaxa, ps0)
ps2

### Compile all the data in one file and export it in excel sheet
pseq <- ps2
meta <- meta(pseq)
taxonomy <- tax_table(pseq)
otu.absolute <- abundances(pseq)
otu.relative <- abundances(pseq, "compositional")
reads_sample <- readcount(pseq)
reads_sample[1:5]
sample_data(pseq)$reads_sample <- reads_sample
df <- psmelt(pseq)
kable(head(df))

write.csv(df, file = "namefile.csv")

#### Plot the relative bacterial abundance in overall pool of samples
## Calculate the relative abundance of each taxa
ps_rel_abund <- transform_sample_counts(ps2, function(x) x / sum(x))

## Agglomerate at "Genus" level
ps_genus <- tax_glom(ps_rel_abund, taxrank = "Genus")    # We can also do it for Phylum and Family levels

## Extract in data.frame format
df_melt <- psmelt(ps_genus)
df_melt$Genus <- as.character(df_melt$Genus)

## Identify the top 10 bacterial taxa
top10_genera <- df_melt %>%
  group_by(Genus) %>%
  summarise(Total = sum(Abundance)) %>%
  arrange(desc(Total)) %>%
  slice_head(n = 10) %>%
  pull(Genus)

## Group other bacterial taxa into "Others"
df_melt$Genus[!(df_melt$Genus %in% top10_genera)] <- "Others"

## Create a palet of 11 colors (10 + "Others")
palette_11 <- c(
  "#1b9e77", "#d95f02", "#e7298a", "#7570b3", "#66a61e",
  "#e6ab02", "#a6761d", "#666666", "#00AFBB", "#FC4E07", "#CCCCCC"  # grey for "Others"
)                                                                                           # ðŸŽ¨ Color palette for 10 genera

## Draw the graph of the 10 top bacterial taxa in each pool of samples
ggplot(df_melt, aes(x = Phenotypes, y = Abundance, fill = Genus)) +
  geom_bar(stat = "identity", position = "fill", width = 0.9) +
  facet_wrap(~Species, scales = "free_x", nrow = 1, strip.position = "bottom") +
  scale_fill_manual(values = palette_11) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1), expand = c(0, 0)) +
  labs(
    title = "Microbial composition: Top 10 Bacterial genera",
    x = NULL,
    y = "Relative abundance (%)",
    fill = "Genus"
  ) +
  theme_minimal(base_size = 13) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 9),
    axis.text.y = element_text(size = 8),
    strip.text = element_text(face = "bold", size = 11),
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 10),
    panel.grid.major.y = element_line(color = "gray80"),
    panel.spacing = unit(1.2, "lines"),
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5)
  )

### Cumulative relative abundance of bacteria taxa according to the resistance phenotype in overall samples
## Taxa sorted by abundance
Top <- names(sort(taxa_sums(ps2), decreasing = TRUE))

## Agglomerate at "Genus" level
dat.aglo <- tax_glom(ps2, taxrank = "Genus")    # We can also do it for Phylum and Family levels

## Transform to relative abundance
dat.trans <- transform_sample_counts(dat.aglo, function(x) x / sum(x))

## Select only the Top 10 most abundant Genera
Top10 <- names(sort(taxa_sums(dat.trans), decreasing = TRUE))[1:10]
prune.dat.two <- prune_taxa(Top10, dat.trans)

## Prepare dataframe
dat.dataframe <- psmelt(prune.dat.two)

## Aggregate by Status and Genus
dat.agr <- aggregate(Abundance ~ Status + Genus, data = dat.dataframe, FUN = mean)  #Status correspond to the main reistance phenotypes : Fumoz-R, Fumoz-HR, Survivor_1X, Survivor_10X, Unexposed and Kisumu

## Plot with Top 10 Genera
ggplot(dat.agr, aes(x = Status, y = Abundance, fill = Genus)) +
  geom_bar(stat = "identity", position = "fill") +
  theme_bw() +
  scale_y_continuous(labels = scales::percent) +
  theme(
    axis.title.x = element_blank(),
    panel.background = element_rect(fill = 'white', colour = 'white'),
    legend.position = "right",
    strip.text = element_text(face = "bold", size = 8, lineheight = 5.0)
  ) +
  ylab("Relative Abundance\n") +
  ggtitle("Top 10 Bacterial Genera composition") +
  labs(fill = "Genus") +
  scale_fill_brewer(palette = "Paired")  # <-- NICE COLOR PALETTE for 10 groups

#### Plot the relative bacterial abundance in Anopheles gambiae                                        
## Subset Anopheles gambiae samples
Agamb <- subset_samples(ps2, Species =="Anopheles_gambiae")

## Agglomerate at "Genus" level
dat.aglo.gamb <- tax_glom(Agamb, taxrank = "Genus")   # We can also do it for Phylum and Family levels

## Transform to relative abundance
dat.trans.gamb <- transform_sample_counts(dat.aglo.gamb, function(x) x / sum(x))

## Identify Top 10 genera
Top10gamb <- names(sort(taxa_sums(dat.trans.gamb), decreasing = TRUE))[1:10]

## Prune dataset to keep only Top 10 genera
prune.dat.two.gamb <- prune_taxa(Top10gamb, dat.trans.gamb)

## Prepare dataframe
dat.dataframe.gamb <- psmelt(prune.dat.two.gamb)

## Aggregate mean abundance by "Status" and "Genus"
dat.agr.gamb <- dat.dataframe.gamb %>%
  group_by(Status, Genus) %>%
  summarise(Abundance = mean(Abundance)) %>%
  ungroup()

## Plot
ggplot(dat.agr.gamb, aes(x = Status, y = Abundance, fill = Genus)) +
  geom_bar(stat = "identity", position = "fill") +
  theme_bw() +
  scale_y_continuous(labels = scales::percent) +
  theme(
    axis.title.x = element_blank(),
    panel.background = element_rect(fill = 'white', colour = 'white'),
    legend.position = "right",
    strip.text = element_text(face = "bold", size = 8, lineheight = 5.0)
  ) +
  ylab("Relative Abundance\n") +
  ggtitle("Top 10 Bacterial Genera - Anopheles_gambiae") +
  labs(fill = "Genus") +
  scale_fill_brewer(palette = "Set3")  # ðŸŽ¨ Color palette for 10 genera

#### Plot the relative bacterial abundance in Anopheles funestus                                       
## Subset Anopheles funestus samples
Afun <- subset_samples(ps2, Species =="Anopheles_funestus")

## Agglomerate at "Genus" level
dat.aglo.fun <- tax_glom(Afun, taxrank = "Genus")   # We can also do it for Phylum and Family levels

## Transform to relative abundance
dat.trans.fun <- transform_sample_counts(dat.aglo.fun, function(x) x / sum(x))

## Identify Top 10 genera
Top10fun <- names(sort(taxa_sums(dat.trans.fun), decreasing = TRUE))[1:10]

## Prune dataset to keep only Top 10 genera
prune.dat.two.fun <- prune_taxa(Top10fun, dat.trans.fun)

## Prepare dataframe
dat.dataframe.fun <- psmelt(prune.dat.two.fun)

## Aggregate mean abundance by "Status" and "Genus"
dat.agr.fun <- dat.dataframe.fun %>%
  group_by(Status, Genus) %>%
  summarise(Abundance = mean(Abundance)) %>%
  ungroup()

## Plot
ggplot(dat.agr.fun, aes(x = Status, y = Abundance, fill = Genus)) +
  geom_bar(stat = "identity", position = "fill") +
  theme_bw() +
  scale_y_continuous(labels = scales::percent) +
  theme(
    axis.title.x = element_blank(),
    panel.background = element_rect(fill = 'white', colour = 'white'),
    legend.position = "right",
    strip.text = element_text(face = "bold", size = 8, lineheight = 5.0)
  ) +
  ylab("Relative Abundance\n") +
  ggtitle("Top 10 Bacterial Genera - Anopheles_funestus") +
  labs(fill = "Genus") +
  scale_fill_brewer(palette = "Set3")  # ðŸŽ¨ Color palette for 10 genera

BACTERIAL PROPORTION (Mean of proportion)

#### Calculate the mean of proportion at the Genus level
ps_rel <- transform_sample_counts(ps2, function(x) x / sum(x))
ps_genus <- tax_glom(ps_rel, taxrank = "Genus")
otu <- as.data.frame(t(otu_table(ps_genus))) 
tax <- as.data.frame(tax_table(ps_genus))
meta <- as(sample_data(ps_genus), "data.frame")
otu$SampleID <- rownames(otu)
meta$SampleID <- rownames(meta)
otu_meta <- left_join(otu, meta, by = "SampleID")
abundance_cols <- names(otu_meta)[sapply(otu_meta, is.numeric)]
otu_long <- pivot_longer(
  otu_meta,
  cols = all_of(abundance_cols),
  names_to = "Genus_ID",
  values_to = "Proportion"
)
otu_long$Genus <- tax[otu_long$Genus_ID, "Genus"]
summary_table <- otu_long %>%
  group_by(Species, Status, Genus) %>%
  summarise(
    Mean = mean(Proportion, na.rm = TRUE) * 100,
    Min = min(Proportion, na.rm = TRUE) * 100,
    Max = max(Proportion, na.rm = TRUE) * 100,
    .groups = "drop"
  ) %>%
  arrange(desc(Mean))
head(summary_table, 10)
write.csv(summary_table, "Proportions_Genus_Ranges_by_Species_Status.csv", row.names = FALSE)

## Phylum Level
ps_rel_phylum <- transform_sample_counts(ps2, function(x) x / sum(x))
ps_phylum <- tax_glom(ps_rel_phylum, taxrank = "Phylum")
otu_p <- as.data.frame(t(otu_table(ps_phylum)))  # genres en colonnes
tax_p <- as.data.frame(tax_table(ps_phylum))
meta_p <- as(sample_data(ps_phylum), "data.frame")
otu_p$SampleID <- rownames(otu_p)
meta_p$SampleID <- rownames(meta_p)
otu_meta_p <- left_join(otu_p, meta_p, by = "SampleID")
abundance_cols_p <- names(otu_meta_p)[sapply(otu_meta_p, is.numeric)]
otu_long_p <- pivot_longer(
  otu_meta_p,
  cols = all_of(abundance_cols_p),
  names_to = "Phylum_ID",
  values_to = "Proportion"
)
otu_long_p$Phylum <- tax[otu_long_p$Phylum_ID, "Phylum"]
summary_table_p <- otu_long_p %>%
  group_by(Species, Status, Phylum) %>%
  summarise(
    Mean = mean(Proportion, na.rm = TRUE) * 100,
    Min = min(Proportion, na.rm = TRUE) * 100,
    Max = max(Proportion, na.rm = TRUE) * 100,
    .groups = "drop"
  ) %>%
  arrange(desc(Mean))
head(summary_table_p, 10)
write.csv(summary_table_p, "Proportions_Phylum_Ranges_by_Species_Status.csv", row.names = FALSE)

## Family Level
ps_rel_Family <- transform_sample_counts(ps2, function(x) x / sum(x))
ps_Family <- tax_glom(ps_rel_Family, taxrank = "Family")
otu_F <- as.data.frame(t(otu_table(ps_Family)))  # genres en colonnes
tax_F <- as.data.frame(tax_table(ps_Family))
meta_F <- as(sample_data(ps_Family), "data.frame")
otu_F$SampleID <- rownames(otu_F)
meta_F$SampleID <- rownames(meta_F)
otu_meta_F <- left_join(otu_F, meta_F, by = "SampleID")
abundance_cols_F <- names(otu_meta_F)[sapply(otu_meta_F, is.numeric)]
otu_long_F <- pivot_longer(
  otu_meta_F,
  cols = all_of(abundance_cols_F),
  names_to = "Family_ID",
  values_to = "Proportion"
)
otu_long_F$Family <- tax[otu_long_F$Family_ID, "Family"]
summary_table_F <- otu_long_F %>%
  group_by (Species, Status, Family) %>%
  summarise(
    Mean = mean(Proportion, na.rm = TRUE) * 100,
    Min = min(Proportion, na.rm = TRUE) * 100,
    Max = max(Proportion, na.rm = TRUE) * 100,
    .groups = "drop"
  ) %>%
  arrange(desc(Mean))
head(summary_table_F, 10)
write.csv(summary_table_F, "Proportions_Family_Ranges_by_Species_Status.csv", row.names = FALSE)

